{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"parshift Description Requirements The implementation requires Python 3.8+ to run. The following libraries are also required: csv pandas matplotlib squarify Installation From PyPI pip install XPTO From source pip install link","title":"Home"},{"location":"index.html#parshift","text":"","title":"parshift"},{"location":"index.html#description","text":"","title":"Description"},{"location":"index.html#requirements","text":"The implementation requires Python 3.8+ to run. The following libraries are also required: csv pandas matplotlib squarify","title":"Requirements"},{"location":"index.html#installation","text":"","title":"Installation"},{"location":"index.html#from-pypi","text":"pip install XPTO","title":"From PyPI"},{"location":"index.html#from-source","text":"pip install link","title":"From source"},{"location":"api/annotation.html","text":"Annotation Function used to return a Dataframe which contains the Participation Shift type, based in Gibson's paper. Parameters: Name Type Description Default filename str Path file name. required delimiter str Parameter delimiter. ',' Returns: Name Type Description df New Dataframe with Participation Shift label and type columns added. Source code in parshift/annotation.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 def parshift_annotation ( filename : str , delimiter : str = \",\" ): \"\"\"Function used to return a Dataframe which contains the Participation Shift type, based in Gibson's paper. Arguments: filename: Path file name. delimiter: Parameter delimiter. Returns: df: New Dataframe with Participation Shift label and type columns added. \"\"\" # # TODO: Adicionar o caso em que o usar j\u00e1 tem uma lista de sentences. # if not filename and not conversation_list: # raise AssertionError(\"One of the parameters 'filename' or 'conversation_list' must be not None\") # elif not conversation_list: # conversation = _read_conversation(filename, delimiter) # else: # conversation = conversation_list # # TODO: fim conversation = _read_conversation ( filename , delimiter ) df = pd . DataFrame ( { \"id\" : [], \"user_id\" : [], \"message_text\" : [], \"reply_id\" : [], \"label_desc\" : [], \"label_code\" : [], \"label_value\" : [], } ) part_1 = \"\" part_2 = \"\" label_code_v = \"\" label_type_v = \"\" for idx , msg in enumerate ( conversation ): if ( msg [ \"reply_id\" ] == None or msg [ \"reply_id\" ] == \"None\" or msg [ \"reply_id\" ] == \"\" ): part_2 = \" \" + str ( msg [ \"user_id\" ]) + \" to group\" else : for msgPrev in conversation : if msg [ \"reply_id\" ] in msgPrev [ \"id\" ]: if ( msgPrev [ \"reply_id\" ] == None or msgPrev [ \"reply_id\" ] == \"None\" or msgPrev [ \"reply_id\" ] == \"\" ): part_1 = str ( msgPrev [ \"user_id\" ]) + \" to group,\" else : # reply - reply for msgPrev2 in conversation : if msgPrev [ \"reply_id\" ] in msgPrev2 [ \"id\" ]: part_1 = ( str ( msgPrev [ \"user_id\" ]) + \" to \" + str ( msgPrev2 [ \"user_id\" ]) + \",\" ) part_2 = ( \" \" + str ( msg [ \"user_id\" ]) + \" to \" + str ( msgPrev [ \"user_id\" ]) ) p1p2 = part_1 + part_2 # print(part_1 + part_2) part_1 = part_2 [ 1 :] + \",\" def _label_code ( label ): # label split a = label . split ( \",\" )[ 0 ] . split ( \"to\" )[ 0 ] . replace ( \" \" , \"\" ) b = label . split ( \",\" )[ 0 ] . split ( \"to\" )[ 1 ] . replace ( \" \" , \"\" ) c = label . split ( \",\" )[ 1 ] . split ( \"to\" )[ 0 ] . replace ( \" \" , \"\" ) d = label . split ( \",\" )[ 1 ] . split ( \"to\" )[ 1 ] . replace ( \" \" , \"\" ) # 1 result = \"A\" # 2 result += \"0-\" if b == \"group\" else \"B-\" # 3 if c == a : result += \"A\" elif c == b : result += \"B\" else : result += \"X\" # 4 if d == \"group\" : result += \"0\" elif d == a : result += \"A\" elif d == b : result += \"B\" else : result += \"Y\" return result if idx != 0 : msg [ \"label\" ] = p1p2 label_code_v = _label_code ( p1p2 ) msg [ \"label_code\" ] = label_code_v label_type_v = _label_type ( label_code_v ) msg [ \"label_type\" ] = label_type_v df . loc [ len ( df . index )] = [ str ( msg [ \"id\" ]), str ( msg [ \"user_id\" ]), msg [ \"message_text\" ], str ( msg [ \"reply_id\" ]), ( p1p2 ), ( label_code_v ), ( label_type_v ), ] # print('-'*20) return df Function used to read a conversation file and return a list of dictionary structure. The dictionary keys are: id , user_id , message_text and reply_id . Parameters: Name Type Description Default filename str Path file name. required delimiter str Parameter delimiter. ',' Returns: Name Type Description conversation List of dictionary structure. Source code in parshift/annotation.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def _read_conversation ( filename : str , delimiter : str = \",\" ): \"\"\"Function used to read a conversation file and return a list of dictionary structure. The dictionary keys are: `id`, `user_id`, `message_text` and `reply_id`. Arguments: filename: Path file name. delimiter: Parameter delimiter. Returns: conversation: List of dictionary structure. \"\"\" if not isinstance ( filename , str ): raise TypeError ( \"Parameter filename must be a String\" ) if not re . search ( \"[A-Z|a-z]+.(csv|CSV)\" , filename ): raise ValueError ( \"Parameter filename must be a CSV file\" ) if not isinstance ( delimiter , str ): raise TypeError ( \"Parameter delimiter must be a String\" ) if len ( delimiter ) != 1 : raise ValueError ( \"Parameter delimiter must be one character\" ) conversation = [] with open ( filename , \"r\" , encoding = \"utf8\" ) as file : csv_reader = csv . reader ( file , delimiter = delimiter ) turn = 0 for idx , csv_line in enumerate ( csv_reader ): if idx == 0 : continue # header if ( idx != 1 and conversation [ turn - 1 ][ \"user_id\" ] == csv_line [ 1 ] and conversation [ turn - 1 ][ \"reply_id\" ] == csv_line [ 3 ] ): msg_join = f \" { conversation [ turn - 1 ][ 'message_text' ] } . { csv_line [ 2 ] } \" list_id = conversation [ turn - 1 ][ \"id\" ] + [ csv_line [ 0 ]] conversation [ turn - 1 ][ \"id\" ] = list_id conversation [ turn - 1 ][ \"message_text\" ] = msg_join else : id = csv_line [ 0 ] user_id = csv_line [ 1 ] message_text = csv_line [ 2 ] reply_id = csv_line [ 3 ] turn += 1 conversation . append ( { \"id\" : [ id ], \"user_id\" : user_id , \"message_text\" : message_text , \"reply_id\" : reply_id , } ) return conversation Function used to return the Participation Shift type, based in Gibson's paper. Parameters: Name Type Description Default label_code str Participation Shift Code (e.g A0-XA). required Returns: Type Description Turn Type : Participation shift type in a given turn - one of [Turn Receiving, Turn Claiming, Turn Usurping, Turn Continuing]. Source code in parshift/annotation.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 def _label_type ( label_code : str ): \"\"\"Function used to return the Participation Shift type, based in Gibson's paper. Arguments: label_code: Participation Shift Code (e.g A0-XA).\\n Returns: Turn Type : Participation shift type in a given turn - one of [Turn Receiving, Turn Claiming, Turn Usurping, Turn Continuing]. \"\"\" if not isinstance ( label_code , str ): raise TypeError ( \"Parameter label_code must be a String\" ) if not re . search ( \"A[B|0]-[A|B|X][A|B|X|Y|0]\" , label_code ): raise ValueError ( \"Parameter label_code must be a parshift code. eg: AB-B0\" ) p_shift = { \"AB-BA\" : \"Turn Receiving\" , \"AB-B0\" : \"Turn Receiving\" , \"AB-BY\" : \"Turn Receiving\" , \"A0-X0\" : \"Turn Claiming\" , \"A0-XA\" : \"Turn Claiming\" , \"A0-XY\" : \"Turn Claiming\" , \"AB-X0\" : \"Turn Usurping\" , \"AB-XA\" : \"Turn Usurping\" , \"AB-XB\" : \"Turn Usurping\" , \"AB-XY\" : \"Turn Usurping\" , \"A0-AY\" : \"Turn Continuing\" , \"AB-A0\" : \"Turn Continuing\" , \"AB-AY\" : \"Turn Continuing\" , # \"A0-A0\": \"Turn Continuing\", } return p_shift [ label_code ]","title":"Annotation"},{"location":"api/annotation.html#annotation","text":"Function used to return a Dataframe which contains the Participation Shift type, based in Gibson's paper. Parameters: Name Type Description Default filename str Path file name. required delimiter str Parameter delimiter. ',' Returns: Name Type Description df New Dataframe with Participation Shift label and type columns added. Source code in parshift/annotation.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 def parshift_annotation ( filename : str , delimiter : str = \",\" ): \"\"\"Function used to return a Dataframe which contains the Participation Shift type, based in Gibson's paper. Arguments: filename: Path file name. delimiter: Parameter delimiter. Returns: df: New Dataframe with Participation Shift label and type columns added. \"\"\" # # TODO: Adicionar o caso em que o usar j\u00e1 tem uma lista de sentences. # if not filename and not conversation_list: # raise AssertionError(\"One of the parameters 'filename' or 'conversation_list' must be not None\") # elif not conversation_list: # conversation = _read_conversation(filename, delimiter) # else: # conversation = conversation_list # # TODO: fim conversation = _read_conversation ( filename , delimiter ) df = pd . DataFrame ( { \"id\" : [], \"user_id\" : [], \"message_text\" : [], \"reply_id\" : [], \"label_desc\" : [], \"label_code\" : [], \"label_value\" : [], } ) part_1 = \"\" part_2 = \"\" label_code_v = \"\" label_type_v = \"\" for idx , msg in enumerate ( conversation ): if ( msg [ \"reply_id\" ] == None or msg [ \"reply_id\" ] == \"None\" or msg [ \"reply_id\" ] == \"\" ): part_2 = \" \" + str ( msg [ \"user_id\" ]) + \" to group\" else : for msgPrev in conversation : if msg [ \"reply_id\" ] in msgPrev [ \"id\" ]: if ( msgPrev [ \"reply_id\" ] == None or msgPrev [ \"reply_id\" ] == \"None\" or msgPrev [ \"reply_id\" ] == \"\" ): part_1 = str ( msgPrev [ \"user_id\" ]) + \" to group,\" else : # reply - reply for msgPrev2 in conversation : if msgPrev [ \"reply_id\" ] in msgPrev2 [ \"id\" ]: part_1 = ( str ( msgPrev [ \"user_id\" ]) + \" to \" + str ( msgPrev2 [ \"user_id\" ]) + \",\" ) part_2 = ( \" \" + str ( msg [ \"user_id\" ]) + \" to \" + str ( msgPrev [ \"user_id\" ]) ) p1p2 = part_1 + part_2 # print(part_1 + part_2) part_1 = part_2 [ 1 :] + \",\" def _label_code ( label ): # label split a = label . split ( \",\" )[ 0 ] . split ( \"to\" )[ 0 ] . replace ( \" \" , \"\" ) b = label . split ( \",\" )[ 0 ] . split ( \"to\" )[ 1 ] . replace ( \" \" , \"\" ) c = label . split ( \",\" )[ 1 ] . split ( \"to\" )[ 0 ] . replace ( \" \" , \"\" ) d = label . split ( \",\" )[ 1 ] . split ( \"to\" )[ 1 ] . replace ( \" \" , \"\" ) # 1 result = \"A\" # 2 result += \"0-\" if b == \"group\" else \"B-\" # 3 if c == a : result += \"A\" elif c == b : result += \"B\" else : result += \"X\" # 4 if d == \"group\" : result += \"0\" elif d == a : result += \"A\" elif d == b : result += \"B\" else : result += \"Y\" return result if idx != 0 : msg [ \"label\" ] = p1p2 label_code_v = _label_code ( p1p2 ) msg [ \"label_code\" ] = label_code_v label_type_v = _label_type ( label_code_v ) msg [ \"label_type\" ] = label_type_v df . loc [ len ( df . index )] = [ str ( msg [ \"id\" ]), str ( msg [ \"user_id\" ]), msg [ \"message_text\" ], str ( msg [ \"reply_id\" ]), ( p1p2 ), ( label_code_v ), ( label_type_v ), ] # print('-'*20) return df Function used to read a conversation file and return a list of dictionary structure. The dictionary keys are: id , user_id , message_text and reply_id . Parameters: Name Type Description Default filename str Path file name. required delimiter str Parameter delimiter. ',' Returns: Name Type Description conversation List of dictionary structure. Source code in parshift/annotation.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def _read_conversation ( filename : str , delimiter : str = \",\" ): \"\"\"Function used to read a conversation file and return a list of dictionary structure. The dictionary keys are: `id`, `user_id`, `message_text` and `reply_id`. Arguments: filename: Path file name. delimiter: Parameter delimiter. Returns: conversation: List of dictionary structure. \"\"\" if not isinstance ( filename , str ): raise TypeError ( \"Parameter filename must be a String\" ) if not re . search ( \"[A-Z|a-z]+.(csv|CSV)\" , filename ): raise ValueError ( \"Parameter filename must be a CSV file\" ) if not isinstance ( delimiter , str ): raise TypeError ( \"Parameter delimiter must be a String\" ) if len ( delimiter ) != 1 : raise ValueError ( \"Parameter delimiter must be one character\" ) conversation = [] with open ( filename , \"r\" , encoding = \"utf8\" ) as file : csv_reader = csv . reader ( file , delimiter = delimiter ) turn = 0 for idx , csv_line in enumerate ( csv_reader ): if idx == 0 : continue # header if ( idx != 1 and conversation [ turn - 1 ][ \"user_id\" ] == csv_line [ 1 ] and conversation [ turn - 1 ][ \"reply_id\" ] == csv_line [ 3 ] ): msg_join = f \" { conversation [ turn - 1 ][ 'message_text' ] } . { csv_line [ 2 ] } \" list_id = conversation [ turn - 1 ][ \"id\" ] + [ csv_line [ 0 ]] conversation [ turn - 1 ][ \"id\" ] = list_id conversation [ turn - 1 ][ \"message_text\" ] = msg_join else : id = csv_line [ 0 ] user_id = csv_line [ 1 ] message_text = csv_line [ 2 ] reply_id = csv_line [ 3 ] turn += 1 conversation . append ( { \"id\" : [ id ], \"user_id\" : user_id , \"message_text\" : message_text , \"reply_id\" : reply_id , } ) return conversation Function used to return the Participation Shift type, based in Gibson's paper. Parameters: Name Type Description Default label_code str Participation Shift Code (e.g A0-XA). required Returns: Type Description Turn Type : Participation shift type in a given turn - one of [Turn Receiving, Turn Claiming, Turn Usurping, Turn Continuing]. Source code in parshift/annotation.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 def _label_type ( label_code : str ): \"\"\"Function used to return the Participation Shift type, based in Gibson's paper. Arguments: label_code: Participation Shift Code (e.g A0-XA).\\n Returns: Turn Type : Participation shift type in a given turn - one of [Turn Receiving, Turn Claiming, Turn Usurping, Turn Continuing]. \"\"\" if not isinstance ( label_code , str ): raise TypeError ( \"Parameter label_code must be a String\" ) if not re . search ( \"A[B|0]-[A|B|X][A|B|X|Y|0]\" , label_code ): raise ValueError ( \"Parameter label_code must be a parshift code. eg: AB-B0\" ) p_shift = { \"AB-BA\" : \"Turn Receiving\" , \"AB-B0\" : \"Turn Receiving\" , \"AB-BY\" : \"Turn Receiving\" , \"A0-X0\" : \"Turn Claiming\" , \"A0-XA\" : \"Turn Claiming\" , \"A0-XY\" : \"Turn Claiming\" , \"AB-X0\" : \"Turn Usurping\" , \"AB-XA\" : \"Turn Usurping\" , \"AB-XB\" : \"Turn Usurping\" , \"AB-XY\" : \"Turn Usurping\" , \"A0-AY\" : \"Turn Continuing\" , \"AB-A0\" : \"Turn Continuing\" , \"AB-AY\" : \"Turn Continuing\" , # \"A0-A0\": \"Turn Continuing\", } return p_shift [ label_code ]","title":"Annotation"},{"location":"api/conditional_probabilities.html","text":"Conditional Probabilities Calculate the conditional probabilities for a given parshift_annotation_df DataFrame based on Gibson's framework. Parameters: Name Type Description Default parshift_annotation_df pd . DataFrame A DataFrame with parshift annotations. required Returns: Type Description pd . DataFrame A DataFrame containing the conditional probabilities for each parshift code. Source code in parshift/conditional_probabilities.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def conditional_probabilities ( parshift_annotation_df : pd . DataFrame ) -> pd . DataFrame : \"\"\" Calculate the conditional probabilities for a given `parshift_annotation_df` DataFrame based on Gibson's framework. Arguments: parshift_annotation_df: A DataFrame with `parshift` annotations. Returns: A DataFrame containing the conditional probabilities for each `parshift` code. \"\"\" if not isinstance ( parshift_annotation_df , pd . DataFrame ): raise TypeError ( \"Parameter parshift_annotation_df must be a Dataframe\" ) frequency_table_and_counts = _frequency_table ( parshift_annotation_df ) freq_table = frequency_table_and_counts [ 0 ] cond_prob = {} for key in freq_table : if key . split ( \"-\" )[ 0 ] == \"A0\" : if key not in [ \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , \"A0-A0\" ]: cond_prob [ key ] = { \"CP\" : round ( freq_table [ key ] / frequency_table_and_counts [ 1 ], 2 ), \"CPeTC\" : round ( freq_table [ key ] / frequency_table_and_counts [ 3 ], 2 ), } else : cond_prob [ key ] = { \"CP\" : round ( freq_table [ key ] / frequency_table_and_counts [ 1 ], 2 ), \"CPeTC\" : \"\" , } else : if key not in [ \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , \"A0-A0\" ]: cond_prob [ key ] = { \"CP\" : round ( freq_table [ key ] / frequency_table_and_counts [ 2 ], 2 ), \"CPeTC\" : round ( freq_table [ key ] / frequency_table_and_counts [ 4 ], 2 ), } else : cond_prob [ key ] = { \"CP\" : round ( freq_table [ key ] / frequency_table_and_counts [ 2 ], 2 ), \"CPeTC\" : \"\" , } cond_prob = pd . DataFrame . from_dict ( cond_prob , orient = \"index\" ) freq = pd . DataFrame . from_dict ( freq_table , orient = \"index\" , columns = [ \"Frequency\" ]) freq [ \"Probability\" ] = round ( freq [ \"Frequency\" ] / freq [ \"Frequency\" ] . sum (), 2 ) result = ( pd . concat ([ freq , cond_prob ], axis = 1 ) . reset_index () . rename ( columns = { \"index\" : \"parshift_code\" }) ) order = { \"AB-BA\" : 5 , \"AB-B0\" : 6 , \"AB-BY\" : 11 , \"A0-X0\" : 1 , \"A0-XA\" : 0 , \"A0-XY\" : 2 , \"AB-X0\" : 7 , \"AB-XA\" : 8 , \"AB-XB\" : 9 , \"AB-XY\" : 12 , \"A0-AY\" : 3 , \"AB-A0\" : 10 , \"AB-AY\" : 12 , # \"A0-A0\": 4, } result [ \"parshift\" ] = result [ \"parshift_code\" ] . map ( _label_type ) result = result . sort_values ( by = [ \"parshift_code\" ], key = lambda x : x . map ( order ) ) . reset_index ( drop = True ) return result This function takes in a dataframe of ParShift annotations and returns a frequency table of ParShift codes. Parameters: Name Type Description Default parshift_annotation_df A Pandas dataframe containing ParShift annotations required Returns: Type Description A list containing a dictionary of ParShift codes and their frequencies, the total number of times a ParShift code starting with \"A0\" appears, the total number of times a Parshift code starting with \"AB\" appears, the total number of times a Parshift code with \"A0\" appears excluding 'Turn Continuing' type, and the total number of times a ParShift code with \"AB\" appears excluding 'Turn Continuing' type. Source code in parshift/conditional_probabilities.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def _frequency_table ( parshift_annotation_df ): \"\"\" This function takes in a dataframe of ParShift annotations and returns a frequency table of ParShift codes. Arguments: parshift_annotation_df: A Pandas dataframe containing ParShift annotations Returns: A list containing a dictionary of ParShift codes and their frequencies, the total number of times a ParShift code starting with \"A0\" appears, the total number of times a Parshift code starting with \"AB\" appears, the total number of times a Parshift code with \"A0\" appears excluding 'Turn Continuing' type, and the total number of times a ParShift code with \"AB\" appears excluding 'Turn Continuing' type. \"\"\" parshift_codes = [ \"AB-BA\" , \"AB-B0\" , \"AB-BY\" , \"A0-X0\" , \"A0-XA\" , \"A0-XY\" , \"AB-X0\" , \"AB-XA\" , \"AB-XB\" , \"AB-XY\" , \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , # \"A0-A0\", ] dict_prob_empirical_count = {} count_start_A0_total = 0 count_start_AB_total = 0 count_not_turn_continuing_A0 = 0 count_not_turn_continuing_AB = 0 for code in parshift_codes : count = 0 for index , row in parshift_annotation_df . iterrows (): if row [ \"label_code\" ] == code : count += 1 dict_prob_empirical_count [ code ] = count if code . split ( \"-\" )[ 0 ] == \"A0\" : count_start_A0_total += count if code not in [ \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , \"A0-A0\" ]: count_not_turn_continuing_A0 += count else : count_start_AB_total += count if code not in [ \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , \"A0-A0\" ]: count_not_turn_continuing_AB += count return [ dict_prob_empirical_count , count_start_A0_total , count_start_AB_total , count_not_turn_continuing_A0 , count_not_turn_continuing_AB , ]","title":"Conditional Probabilities"},{"location":"api/conditional_probabilities.html#conditional-probabilities","text":"Calculate the conditional probabilities for a given parshift_annotation_df DataFrame based on Gibson's framework. Parameters: Name Type Description Default parshift_annotation_df pd . DataFrame A DataFrame with parshift annotations. required Returns: Type Description pd . DataFrame A DataFrame containing the conditional probabilities for each parshift code. Source code in parshift/conditional_probabilities.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def conditional_probabilities ( parshift_annotation_df : pd . DataFrame ) -> pd . DataFrame : \"\"\" Calculate the conditional probabilities for a given `parshift_annotation_df` DataFrame based on Gibson's framework. Arguments: parshift_annotation_df: A DataFrame with `parshift` annotations. Returns: A DataFrame containing the conditional probabilities for each `parshift` code. \"\"\" if not isinstance ( parshift_annotation_df , pd . DataFrame ): raise TypeError ( \"Parameter parshift_annotation_df must be a Dataframe\" ) frequency_table_and_counts = _frequency_table ( parshift_annotation_df ) freq_table = frequency_table_and_counts [ 0 ] cond_prob = {} for key in freq_table : if key . split ( \"-\" )[ 0 ] == \"A0\" : if key not in [ \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , \"A0-A0\" ]: cond_prob [ key ] = { \"CP\" : round ( freq_table [ key ] / frequency_table_and_counts [ 1 ], 2 ), \"CPeTC\" : round ( freq_table [ key ] / frequency_table_and_counts [ 3 ], 2 ), } else : cond_prob [ key ] = { \"CP\" : round ( freq_table [ key ] / frequency_table_and_counts [ 1 ], 2 ), \"CPeTC\" : \"\" , } else : if key not in [ \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , \"A0-A0\" ]: cond_prob [ key ] = { \"CP\" : round ( freq_table [ key ] / frequency_table_and_counts [ 2 ], 2 ), \"CPeTC\" : round ( freq_table [ key ] / frequency_table_and_counts [ 4 ], 2 ), } else : cond_prob [ key ] = { \"CP\" : round ( freq_table [ key ] / frequency_table_and_counts [ 2 ], 2 ), \"CPeTC\" : \"\" , } cond_prob = pd . DataFrame . from_dict ( cond_prob , orient = \"index\" ) freq = pd . DataFrame . from_dict ( freq_table , orient = \"index\" , columns = [ \"Frequency\" ]) freq [ \"Probability\" ] = round ( freq [ \"Frequency\" ] / freq [ \"Frequency\" ] . sum (), 2 ) result = ( pd . concat ([ freq , cond_prob ], axis = 1 ) . reset_index () . rename ( columns = { \"index\" : \"parshift_code\" }) ) order = { \"AB-BA\" : 5 , \"AB-B0\" : 6 , \"AB-BY\" : 11 , \"A0-X0\" : 1 , \"A0-XA\" : 0 , \"A0-XY\" : 2 , \"AB-X0\" : 7 , \"AB-XA\" : 8 , \"AB-XB\" : 9 , \"AB-XY\" : 12 , \"A0-AY\" : 3 , \"AB-A0\" : 10 , \"AB-AY\" : 12 , # \"A0-A0\": 4, } result [ \"parshift\" ] = result [ \"parshift_code\" ] . map ( _label_type ) result = result . sort_values ( by = [ \"parshift_code\" ], key = lambda x : x . map ( order ) ) . reset_index ( drop = True ) return result This function takes in a dataframe of ParShift annotations and returns a frequency table of ParShift codes. Parameters: Name Type Description Default parshift_annotation_df A Pandas dataframe containing ParShift annotations required Returns: Type Description A list containing a dictionary of ParShift codes and their frequencies, the total number of times a ParShift code starting with \"A0\" appears, the total number of times a Parshift code starting with \"AB\" appears, the total number of times a Parshift code with \"A0\" appears excluding 'Turn Continuing' type, and the total number of times a ParShift code with \"AB\" appears excluding 'Turn Continuing' type. Source code in parshift/conditional_probabilities.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def _frequency_table ( parshift_annotation_df ): \"\"\" This function takes in a dataframe of ParShift annotations and returns a frequency table of ParShift codes. Arguments: parshift_annotation_df: A Pandas dataframe containing ParShift annotations Returns: A list containing a dictionary of ParShift codes and their frequencies, the total number of times a ParShift code starting with \"A0\" appears, the total number of times a Parshift code starting with \"AB\" appears, the total number of times a Parshift code with \"A0\" appears excluding 'Turn Continuing' type, and the total number of times a ParShift code with \"AB\" appears excluding 'Turn Continuing' type. \"\"\" parshift_codes = [ \"AB-BA\" , \"AB-B0\" , \"AB-BY\" , \"A0-X0\" , \"A0-XA\" , \"A0-XY\" , \"AB-X0\" , \"AB-XA\" , \"AB-XB\" , \"AB-XY\" , \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , # \"A0-A0\", ] dict_prob_empirical_count = {} count_start_A0_total = 0 count_start_AB_total = 0 count_not_turn_continuing_A0 = 0 count_not_turn_continuing_AB = 0 for code in parshift_codes : count = 0 for index , row in parshift_annotation_df . iterrows (): if row [ \"label_code\" ] == code : count += 1 dict_prob_empirical_count [ code ] = count if code . split ( \"-\" )[ 0 ] == \"A0\" : count_start_A0_total += count if code not in [ \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , \"A0-A0\" ]: count_not_turn_continuing_A0 += count else : count_start_AB_total += count if code not in [ \"A0-AY\" , \"AB-A0\" , \"AB-AY\" , \"A0-A0\" ]: count_not_turn_continuing_AB += count return [ dict_prob_empirical_count , count_start_A0_total , count_start_AB_total , count_not_turn_continuing_A0 , count_not_turn_continuing_AB , ]","title":"Conditional Probabilities"},{"location":"api/plotting.html","text":"Plotting Function used to return a matplotlib object which contains the conditional probabilities frequencies based in Gibson's paper. Parameters: Name Type Description Default conditional_probabilities_df pd . DataFrame Dataframe object that contain the whole information about the Participation Shift conditional probabilities. required Returns: Name Type Description Figure Matplotlib object with the Participation Shifts Frequency. Source code in parshift/plotting.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def frequency_treemap ( conditional_probabilities_df : pd . DataFrame ): \"\"\"Function used to return a matplotlib object which contains the conditional probabilities frequencies based in Gibson's paper. Arguments: conditional_probabilities_df: Dataframe object that contain the whole information about the Participation Shift conditional probabilities. Returns: Figure: Matplotlib object with the Participation Shifts Frequency. \"\"\" gb_parshift = conditional_probabilities_df . groupby ([ \"parshift\" ])[ \"Frequency\" ] . sum () data = [ el for el in list ( zip ( gb_parshift . values , gb_parshift . index . values )) if el [ 0 ] != 0 ] labels = [ f \" { el } \\n { round ( 100 * ( list ( zip ( * data ))[ 0 ][ idx ] / sum ( list ( list ( zip ( * data ))[ 0 ]))), 1 ) } %\" for idx , el in enumerate ( list ( zip ( * data ))[ 1 ]) ] figure = plt . figure () squarify . plot ( list ( zip ( * data ))[ 0 ], label = labels , pad = 2 ) plt . title ( \"Participation Shifts Frequency (%)\" ) plt . axis ( \"off\" ) # plt.show() return figure","title":"Plotting"},{"location":"api/plotting.html#plotting","text":"Function used to return a matplotlib object which contains the conditional probabilities frequencies based in Gibson's paper. Parameters: Name Type Description Default conditional_probabilities_df pd . DataFrame Dataframe object that contain the whole information about the Participation Shift conditional probabilities. required Returns: Name Type Description Figure Matplotlib object with the Participation Shifts Frequency. Source code in parshift/plotting.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def frequency_treemap ( conditional_probabilities_df : pd . DataFrame ): \"\"\"Function used to return a matplotlib object which contains the conditional probabilities frequencies based in Gibson's paper. Arguments: conditional_probabilities_df: Dataframe object that contain the whole information about the Participation Shift conditional probabilities. Returns: Figure: Matplotlib object with the Participation Shifts Frequency. \"\"\" gb_parshift = conditional_probabilities_df . groupby ([ \"parshift\" ])[ \"Frequency\" ] . sum () data = [ el for el in list ( zip ( gb_parshift . values , gb_parshift . index . values )) if el [ 0 ] != 0 ] labels = [ f \" { el } \\n { round ( 100 * ( list ( zip ( * data ))[ 0 ][ idx ] / sum ( list ( list ( zip ( * data ))[ 0 ]))), 1 ) } %\" for idx , el in enumerate ( list ( zip ( * data ))[ 1 ]) ] figure = plt . figure () squarify . plot ( list ( zip ( * data ))[ 0 ], label = labels , pad = 2 ) plt . title ( \"Participation Shifts Frequency (%)\" ) plt . axis ( \"off\" ) # plt.show() return figure","title":"Plotting"}]}