{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"parshift Description Requirements The implementation requires Python 3.8+ to run. The following libraries are also required: csv pandas matplotlib squarify Installation From PyPI pip install XPTO From source pip install link","title":"Home"},{"location":"index.html#parshift","text":"","title":"parshift"},{"location":"index.html#description","text":"","title":"Description"},{"location":"index.html#requirements","text":"The implementation requires Python 3.8+ to run. The following libraries are also required: csv pandas matplotlib squarify","title":"Requirements"},{"location":"index.html#installation","text":"","title":"Installation"},{"location":"index.html#from-pypi","text":"pip install XPTO","title":"From PyPI"},{"location":"index.html#from-source","text":"pip install link","title":"From source"},{"location":"api/annotation.html","text":"Annotation parshift_annotation ( filename , delimiter = ',' ) Function used to return a Dataframe which contains the Participation Shift type, based in Gibson's paper. Parameters: Name Type Description Default filename str Path file name. required delimiter str Parameter delimiter. ',' Returns: Name Type Description df New Dataframe with Participation Shift label and type columns added. Source code in parshift/annotation.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 def parshift_annotation ( filename : str , delimiter : str = \",\" ): \"\"\"Function used to return a Dataframe which contains the Participation Shift type, based in Gibson's paper. Arguments: filename: Path file name. delimiter: Parameter delimiter. Returns: df: New Dataframe with Participation Shift label and type columns added. \"\"\" # # TODO: Adicionar o caso em que o usar j\u00e1 tem uma lista de sentences. # if not filename and not conversation_list: # raise AssertionError(\"One of the parameters 'filename' or 'conversation_list' must be not None\") # elif not conversation_list: # conversation = _read_conversation(filename, delimiter) # else: # conversation = conversation_list # # TODO: fim conversation = _read_conversation ( filename , delimiter ) df = pd . DataFrame ( { \"id\" : [], \"user_id\" : [], \"message_text\" : [], \"reply_id\" : [], \"label_desc\" : [], \"label_code\" : [], \"label_value\" : [], } ) part_1 = \"\" part_2 = \"\" label_code_v = \"\" label_type_v = \"\" for idx , msg in enumerate ( conversation ): if ( msg [ \"reply_id\" ] == None or msg [ \"reply_id\" ] == \"None\" or msg [ \"reply_id\" ] == \"\" ): part_2 = \" \" + str ( msg [ \"user_id\" ]) + \" to group\" else : for msgPrev in conversation : if msg [ \"reply_id\" ] in msgPrev [ \"id\" ]: if ( msgPrev [ \"reply_id\" ] == None or msgPrev [ \"reply_id\" ] == \"None\" or msgPrev [ \"reply_id\" ] == \"\" ): part_1 = str ( msgPrev [ \"user_id\" ]) + \" to group,\" else : # reply - reply for msgPrev2 in conversation : if msgPrev [ \"reply_id\" ] in msgPrev2 [ \"id\" ]: part_1 = ( str ( msgPrev [ \"user_id\" ]) + \" to \" + str ( msgPrev2 [ \"user_id\" ]) + \",\" ) part_2 = ( \" \" + str ( msg [ \"user_id\" ]) + \" to \" + str ( msgPrev [ \"user_id\" ]) ) p1p2 = part_1 + part_2 # print(part_1 + part_2) part_1 = part_2 [ 1 :] + \",\" def _label_code ( label ): # label split a = label . split ( \",\" )[ 0 ] . split ( \"to\" )[ 0 ] . replace ( \" \" , \"\" ) b = label . split ( \",\" )[ 0 ] . split ( \"to\" )[ 1 ] . replace ( \" \" , \"\" ) c = label . split ( \",\" )[ 1 ] . split ( \"to\" )[ 0 ] . replace ( \" \" , \"\" ) d = label . split ( \",\" )[ 1 ] . split ( \"to\" )[ 1 ] . replace ( \" \" , \"\" ) # 1 result = \"A\" # 2 result += \"0-\" if b == \"group\" else \"B-\" # 3 if c == a : result += \"A\" elif c == b : result += \"B\" else : result += \"X\" # 4 if d == \"group\" : result += \"0\" elif d == a : result += \"A\" elif d == b : result += \"B\" else : result += \"Y\" return result if idx != 0 : msg [ \"label\" ] = p1p2 label_code_v = _label_code ( p1p2 ) msg [ \"label_code\" ] = label_code_v label_type_v = _label_type ( label_code_v ) msg [ \"label_type\" ] = label_type_v df . loc [ len ( df . index )] = [ str ( msg [ \"id\" ]), str ( msg [ \"user_id\" ]), msg [ \"message_text\" ], str ( msg [ \"reply_id\" ]), ( p1p2 ), ( label_code_v ), ( label_type_v ), ] # print('-'*20) return df","title":"Annotation"},{"location":"api/annotation.html#annotation","text":"","title":"Annotation"},{"location":"api/annotation.html#parshift.annotation.parshift_annotation","text":"Function used to return a Dataframe which contains the Participation Shift type, based in Gibson's paper. Parameters: Name Type Description Default filename str Path file name. required delimiter str Parameter delimiter. ',' Returns: Name Type Description df New Dataframe with Participation Shift label and type columns added. Source code in parshift/annotation.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 def parshift_annotation ( filename : str , delimiter : str = \",\" ): \"\"\"Function used to return a Dataframe which contains the Participation Shift type, based in Gibson's paper. Arguments: filename: Path file name. delimiter: Parameter delimiter. Returns: df: New Dataframe with Participation Shift label and type columns added. \"\"\" # # TODO: Adicionar o caso em que o usar j\u00e1 tem uma lista de sentences. # if not filename and not conversation_list: # raise AssertionError(\"One of the parameters 'filename' or 'conversation_list' must be not None\") # elif not conversation_list: # conversation = _read_conversation(filename, delimiter) # else: # conversation = conversation_list # # TODO: fim conversation = _read_conversation ( filename , delimiter ) df = pd . DataFrame ( { \"id\" : [], \"user_id\" : [], \"message_text\" : [], \"reply_id\" : [], \"label_desc\" : [], \"label_code\" : [], \"label_value\" : [], } ) part_1 = \"\" part_2 = \"\" label_code_v = \"\" label_type_v = \"\" for idx , msg in enumerate ( conversation ): if ( msg [ \"reply_id\" ] == None or msg [ \"reply_id\" ] == \"None\" or msg [ \"reply_id\" ] == \"\" ): part_2 = \" \" + str ( msg [ \"user_id\" ]) + \" to group\" else : for msgPrev in conversation : if msg [ \"reply_id\" ] in msgPrev [ \"id\" ]: if ( msgPrev [ \"reply_id\" ] == None or msgPrev [ \"reply_id\" ] == \"None\" or msgPrev [ \"reply_id\" ] == \"\" ): part_1 = str ( msgPrev [ \"user_id\" ]) + \" to group,\" else : # reply - reply for msgPrev2 in conversation : if msgPrev [ \"reply_id\" ] in msgPrev2 [ \"id\" ]: part_1 = ( str ( msgPrev [ \"user_id\" ]) + \" to \" + str ( msgPrev2 [ \"user_id\" ]) + \",\" ) part_2 = ( \" \" + str ( msg [ \"user_id\" ]) + \" to \" + str ( msgPrev [ \"user_id\" ]) ) p1p2 = part_1 + part_2 # print(part_1 + part_2) part_1 = part_2 [ 1 :] + \",\" def _label_code ( label ): # label split a = label . split ( \",\" )[ 0 ] . split ( \"to\" )[ 0 ] . replace ( \" \" , \"\" ) b = label . split ( \",\" )[ 0 ] . split ( \"to\" )[ 1 ] . replace ( \" \" , \"\" ) c = label . split ( \",\" )[ 1 ] . split ( \"to\" )[ 0 ] . replace ( \" \" , \"\" ) d = label . split ( \",\" )[ 1 ] . split ( \"to\" )[ 1 ] . replace ( \" \" , \"\" ) # 1 result = \"A\" # 2 result += \"0-\" if b == \"group\" else \"B-\" # 3 if c == a : result += \"A\" elif c == b : result += \"B\" else : result += \"X\" # 4 if d == \"group\" : result += \"0\" elif d == a : result += \"A\" elif d == b : result += \"B\" else : result += \"Y\" return result if idx != 0 : msg [ \"label\" ] = p1p2 label_code_v = _label_code ( p1p2 ) msg [ \"label_code\" ] = label_code_v label_type_v = _label_type ( label_code_v ) msg [ \"label_type\" ] = label_type_v df . loc [ len ( df . index )] = [ str ( msg [ \"id\" ]), str ( msg [ \"user_id\" ]), msg [ \"message_text\" ], str ( msg [ \"reply_id\" ]), ( p1p2 ), ( label_code_v ), ( label_type_v ), ] # print('-'*20) return df","title":"parshift_annotation()"},{"location":"api/conditional_probabilities.html","text":"Conditional Probabilities","title":"Conditional Probabilities"},{"location":"api/conditional_probabilities.html#conditional-probabilities","text":"","title":"Conditional Probabilities"},{"location":"api/plotting.html","text":"Plotting frequency_treemap ( conditional_probabilities_df ) Function used to return a matplotlib object which contains the conditional probabilities frequencies based in Gibson's paper. Parameters: Name Type Description Default conditional_probabilities_df pd . DataFrame Dataframe object that contain the whole information about the Participation Shift conditional probabilities. required Returns: Name Type Description Figure Matplotlib object with the Participation Shifts Frequency. Source code in parshift/plotting.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def frequency_treemap ( conditional_probabilities_df : pd . DataFrame ): \"\"\"Function used to return a matplotlib object which contains the conditional probabilities frequencies based in Gibson's paper. Arguments: conditional_probabilities_df: Dataframe object that contain the whole information about the Participation Shift conditional probabilities. Returns: Figure: Matplotlib object with the Participation Shifts Frequency. \"\"\" gb_parshift = conditional_probabilities_df . groupby ([ \"parshift\" ])[ \"Frequency\" ] . sum () data = [ el for el in list ( zip ( gb_parshift . values , gb_parshift . index . values )) if el [ 0 ] != 0 ] labels = [ f \" { el } \\n { round ( 100 * ( list ( zip ( * data ))[ 0 ][ idx ] / sum ( list ( list ( zip ( * data ))[ 0 ]))), 1 ) } %\" for idx , el in enumerate ( list ( zip ( * data ))[ 1 ]) ] figure = plt . figure () squarify . plot ( list ( zip ( * data ))[ 0 ], label = labels , pad = 2 ) plt . title ( \"Participation Shifts Frequency (%)\" ) plt . axis ( \"off\" ) # plt.show() return figure","title":"Plotting"},{"location":"api/plotting.html#plotting","text":"","title":"Plotting"},{"location":"api/plotting.html#parshift.plotting.frequency_treemap","text":"Function used to return a matplotlib object which contains the conditional probabilities frequencies based in Gibson's paper. Parameters: Name Type Description Default conditional_probabilities_df pd . DataFrame Dataframe object that contain the whole information about the Participation Shift conditional probabilities. required Returns: Name Type Description Figure Matplotlib object with the Participation Shifts Frequency. Source code in parshift/plotting.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def frequency_treemap ( conditional_probabilities_df : pd . DataFrame ): \"\"\"Function used to return a matplotlib object which contains the conditional probabilities frequencies based in Gibson's paper. Arguments: conditional_probabilities_df: Dataframe object that contain the whole information about the Participation Shift conditional probabilities. Returns: Figure: Matplotlib object with the Participation Shifts Frequency. \"\"\" gb_parshift = conditional_probabilities_df . groupby ([ \"parshift\" ])[ \"Frequency\" ] . sum () data = [ el for el in list ( zip ( gb_parshift . values , gb_parshift . index . values )) if el [ 0 ] != 0 ] labels = [ f \" { el } \\n { round ( 100 * ( list ( zip ( * data ))[ 0 ][ idx ] / sum ( list ( list ( zip ( * data ))[ 0 ]))), 1 ) } %\" for idx , el in enumerate ( list ( zip ( * data ))[ 1 ]) ] figure = plt . figure () squarify . plot ( list ( zip ( * data ))[ 0 ], label = labels , pad = 2 ) plt . title ( \"Participation Shifts Frequency (%)\" ) plt . axis ( \"off\" ) # plt.show() return figure","title":"frequency_treemap()"}]}